
Delay_timer0_normal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bb  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063b  00000000  00000000  0000085f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023e  00000000  00000000  00000e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000362  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  0000146e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_1s>:
 */ 
#define F_CPU 16000000UL
#include <avr/io.h>

void delay_1s(void)
{
  80:	20 ed       	ldi	r18, 0xD0	; 208
  82:	33 e0       	ldi	r19, 0x03	; 3
	unsigned int i;
	unsigned int count= 976;
	for(i=0; i<count;i++)
	{
	TCNT0=0;
  84:	16 bc       	out	0x26, r1	; 38
	TCCR0A=0;
  86:	14 bc       	out	0x24, r1	; 36
	TCCR0B|=(1<<CS00);
  88:	85 b5       	in	r24, 0x25	; 37
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	85 bd       	out	0x25, r24	; 37
	TCCR0B|=(1<<CS01); //PRESCALAR 64
  8e:	85 b5       	in	r24, 0x25	; 37
  90:	82 60       	ori	r24, 0x02	; 2
  92:	85 bd       	out	0x25, r24	; 37
	TIFR0|=(1<<TOV0); // making timer overflow flag 0
  94:	a8 9a       	sbi	0x15, 0	; 21
	   while (!(TIFR0 & (1 << TOV0))); //waiting timer overflow flag to set so that we get 16us delay 
  96:	a8 9b       	sbis	0x15, 0	; 21
  98:	fe cf       	rjmp	.-4      	; 0x96 <delay_1s+0x16>
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	31 09       	sbc	r19, r1

void delay_1s(void)
{
	unsigned int i;
	unsigned int count= 976;
	for(i=0; i<count;i++)
  9e:	91 f7       	brne	.-28     	; 0x84 <delay_1s+0x4>
	TCCR0B|=(1<<CS00);
	TCCR0B|=(1<<CS01); //PRESCALAR 64
	TIFR0|=(1<<TOV0); // making timer overflow flag 0
	   while (!(TIFR0 & (1 << TOV0))); //waiting timer overflow flag to set so that we get 16us delay 
}
}
  a0:	08 95       	ret

000000a2 <main>:

int main(void)
{
  DDRB|=(1<<DDB5); // PB5 AS OUTPUT
  a2:	25 9a       	sbi	0x04, 5	; 4
    while (1) 
    {
		PORTB^=(1<<PORTB5);
  a4:	c0 e2       	ldi	r28, 0x20	; 32
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	8c 27       	eor	r24, r28
  aa:	85 b9       	out	0x05, r24	; 5
		delay_1s();
  ac:	0e 94 40 00 	call	0x80	; 0x80 <delay_1s>
  b0:	fa cf       	rjmp	.-12     	; 0xa6 <main+0x4>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
