
Timer0_CTM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000694  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021c  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000105c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000341  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000034  00000000  00000000  000013c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 16000000UL
#include <avr/io.h>

int main(void)
{
    DDRB|=(1<<DDB5);
  80:	25 9a       	sbi	0x04, 5	; 4
	TCCR0A|=(1<<WGM01); //CTC MODE
  82:	84 b5       	in	r24, 0x24	; 36
  84:	82 60       	ori	r24, 0x02	; 2
  86:	84 bd       	out	0x24, r24	; 36
	OCR0A=200; // SETPOINT EQUAL TO 200
  88:	88 ec       	ldi	r24, 0xC8	; 200
  8a:	87 bd       	out	0x27, r24	; 39
	TCNT0=0; // INITIAL VALUE OF TIMER IS 0
  8c:	16 bc       	out	0x26, r1	; 38
	TCCR0B|=(1<<CS00); 
  8e:	85 b5       	in	r24, 0x25	; 37
  90:	81 60       	ori	r24, 0x01	; 1
  92:	85 bd       	out	0x25, r24	; 37
	TCCR0B|=(1<<CS02); // prescalar of 1024
  94:	85 b5       	in	r24, 0x25	; 37
  96:	84 60       	ori	r24, 0x04	; 4
  98:	85 bd       	out	0x25, r24	; 37
	TIFR0 |=(1<<OCF0A); // Writing 1 to OCF0A bit of TIFR0 REGISTER TO RESET IT (BECAUSE AVR PEOPLE ARE MAD)
  9a:	a9 9a       	sbi	0x15, 1	; 21
    while (1) 
    {
		PORTB^=(1<<PORTB5);
  9c:	20 e2       	ldi	r18, 0x20	; 32
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	82 27       	eor	r24, r18
  a2:	85 b9       	out	0x05, r24	; 5
  a4:	8c e9       	ldi	r24, 0x9C	; 156
  a6:	90 e0       	ldi	r25, 0x00	; 0
		for(int i=0;i<156;i++)
		{
			while(!(TIFR0&(1<<OCF0A)))
  a8:	a9 9b       	sbis	0x15, 1	; 21
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x28>
			{
			}
			TIFR0 |=(1<<OCF0A);
  ac:	a9 9a       	sbi	0x15, 1	; 21
  ae:	01 97       	sbiw	r24, 0x01	; 1
	TCCR0B|=(1<<CS02); // prescalar of 1024
	TIFR0 |=(1<<OCF0A); // Writing 1 to OCF0A bit of TIFR0 REGISTER TO RESET IT (BECAUSE AVR PEOPLE ARE MAD)
    while (1) 
    {
		PORTB^=(1<<PORTB5);
		for(int i=0;i<156;i++)
  b0:	d9 f7       	brne	.-10     	; 0xa8 <main+0x28>
  b2:	f5 cf       	rjmp	.-22     	; 0x9e <main+0x1e>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
