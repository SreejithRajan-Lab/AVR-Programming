
Modular_delay_gpio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f9  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000702  00000000  00000000  00000a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fa  00000000  00000000  0000112f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  0000152c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a2  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  00001956  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  78:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <gpio_init>:
 */ 
#define F_CPU 16000000UL
#include<avr/io.h>
 void gpio_init(void)
 {
	 DDRB|=(1<<DDB5);
  80:	25 9a       	sbi	0x04, 5	; 4
	 DDRB|=(1<<DDB4);
  82:	24 9a       	sbi	0x04, 4	; 4
	 DDRB|=(1<<DDB3);
  84:	23 9a       	sbi	0x04, 3	; 4
	 DDRB|=(1<<DDB2);
  86:	22 9a       	sbi	0x04, 2	; 4
	 DDRB|=(1<<DDB1);
  88:	21 9a       	sbi	0x04, 1	; 4
  8a:	08 95       	ret

0000008c <main>:
#include "gpio.h"
#include<stdint.h>

int main(void)
{
 gpio_init();
  8c:	0e 94 40 00 	call	0x80	; 0x80 <gpio_init>

    while (1) 
    {
		PORTB^=(1<<PORTB5);
  90:	68 94       	set
  92:	ff 24       	eor	r15, r15
  94:	f5 f8       	bld	r15, 5
		PORTB^=(1<<PORTB4);
  96:	00 e1       	ldi	r16, 0x10	; 16
		PORTB^=(1<<PORTB3);
  98:	18 e0       	ldi	r17, 0x08	; 8
		PORTB^=(1<<PORTB2);
  9a:	d4 e0       	ldi	r29, 0x04	; 4
		PORTB^=(1<<PORTB1);
  9c:	c2 e0       	ldi	r28, 0x02	; 2
{
 gpio_init();

    while (1) 
    {
		PORTB^=(1<<PORTB5);
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	8f 25       	eor	r24, r15
  a2:	85 b9       	out	0x05, r24	; 5
		PORTB^=(1<<PORTB4);
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	80 27       	eor	r24, r16
  a8:	85 b9       	out	0x05, r24	; 5
		PORTB^=(1<<PORTB3);
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	81 27       	eor	r24, r17
  ae:	85 b9       	out	0x05, r24	; 5
		PORTB^=(1<<PORTB2);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8d 27       	eor	r24, r29
  b4:	85 b9       	out	0x05, r24	; 5
		PORTB^=(1<<PORTB1);
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	8c 27       	eor	r24, r28
  ba:	85 b9       	out	0x05, r24	; 5
		anees(2000);  // just used a student's name for delay. Its better to use a name which is close to the purpose.i need to get 2000ms delay
  bc:	80 ed       	ldi	r24, 0xD0	; 208
  be:	97 e0       	ldi	r25, 0x07	; 7
  c0:	0e 94 71 00 	call	0xe2	; 0xe2 <anees>
  c4:	ec cf       	rjmp	.-40     	; 0x9e <main+0x12>

000000c6 <timer0_init>:
 */ 
#define F_CPU 16000000UL
#include<avr/io.h>
void timer0_init(void) //define timer0_init()
{
	TCCR0A|=(1<<WGM01); //CTC MODE
  c6:	84 b5       	in	r24, 0x24	; 36
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	84 bd       	out	0x24, r24	; 36
	OCR0A=249; // for count 250 setpoint
  cc:	89 ef       	ldi	r24, 0xF9	; 249
  ce:	87 bd       	out	0x27, r24	; 39
	TCNT0=0; // making timer counter 0
  d0:	16 bc       	out	0x26, r1	; 38
	TCCR0B|=(1<<CS00);
  d2:	85 b5       	in	r24, 0x25	; 37
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	85 bd       	out	0x25, r24	; 37
	TCCR0B|=(1<<CS01); //prescalar 64
  d8:	85 b5       	in	r24, 0x25	; 37
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	85 bd       	out	0x25, r24	; 37
	TIFR0|=(1<<OCF0A); // setting flag to 0 by writing one 
  de:	a9 9a       	sbi	0x15, 1	; 21
  e0:	08 95       	ret

000000e2 <anees>:
}

void anees(uint16_t ms) // define anees
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
	timer0_init();
  e8:	0e 94 63 00 	call	0xc6	; 0xc6 <timer0_init>
	while(ms--) // creates delay for "ms" milliseconds 
  ec:	ce 01       	movw	r24, r28
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	cd 2b       	or	r28, r29
  f2:	29 f0       	breq	.+10     	; 0xfe <anees+0x1c>
	{
		while(!(TIFR0&(1<<OCF0A))) // 1ms LOOP
  f4:	a9 9b       	sbis	0x15, 1	; 21
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <anees+0x12>
		{
			
		}
		TIFR0|=(1<<OCF0A);
  f8:	a9 9a       	sbi	0x15, 1	; 21
}

void anees(uint16_t ms) // define anees
{
	timer0_init();
	while(ms--) // creates delay for "ms" milliseconds 
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	d8 f7       	brcc	.-10     	; 0xf4 <anees+0x12>
			
		}
		TIFR0|=(1<<OCF0A);
	}
	
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
