
dcmotor_switch1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a8  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b8  00000000  00000000  00000feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000396  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  0000165e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000177e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include<util/delay.h>


int main(void)
{
	DDRB|=(1<<DDB5);
  80:	25 9a       	sbi	0x04, 5	; 4
	DDRB|=(1<<DDB4);
  82:	24 9a       	sbi	0x04, 4	; 4
	DDRD &= ~(1 << DDD2);
  84:	52 98       	cbi	0x0a, 2	; 10


	while (1)
	{
		if (PIND & (1 << PIND2))
  86:	4a 9b       	sbis	0x09, 2	; 9
  88:	2d c0       	rjmp	.+90     	; 0xe4 <main+0x64>
		{
			
		
		PORTB|=(1<<PORTB5);
  8a:	2d 9a       	sbi	0x05, 5	; 5
		PORTB&=~(1<<PORTB4);
  8c:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	83 e2       	ldi	r24, 0x23	; 35
  92:	94 ef       	ldi	r25, 0xF4	; 244
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x14>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x1e>
  9e:	00 00       	nop
		_delay_ms(5000);   //CW
		PORTB&=~(1<<PORTB4); 
  a0:	2c 98       	cbi	0x05, 4	; 5
		PORTB&=~(1<<PORTB5);
  a2:	2d 98       	cbi	0x05, 5	; 5
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	83 e2       	ldi	r24, 0x23	; 35
  a8:	94 ef       	ldi	r25, 0xF4	; 244
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x2a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x34>
  b4:	00 00       	nop
		_delay_ms(5000); //STOP
		PORTB|=(1<<PORTB4);
  b6:	2c 9a       	sbi	0x05, 4	; 5
		PORTB&=~(1<<PORTB5);
  b8:	2d 98       	cbi	0x05, 5	; 5
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	83 e2       	ldi	r24, 0x23	; 35
  be:	94 ef       	ldi	r25, 0xF4	; 244
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x40>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4a>
  ca:	00 00       	nop
		_delay_ms(5000);//CCW
		PORTB&=~(1<<PORTB4);
  cc:	2c 98       	cbi	0x05, 4	; 5
		PORTB&=~(1<<PORTB5);
  ce:	2d 98       	cbi	0x05, 5	; 5
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	83 e2       	ldi	r24, 0x23	; 35
  d4:	94 ef       	ldi	r25, 0xF4	; 244
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x56>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x60>
  e0:	00 00       	nop
  e2:	d1 cf       	rjmp	.-94     	; 0x86 <main+0x6>
		_delay_ms(5000);//STOP
		}
		else
		{
			PORTB&=~(1<<PORTB4);
  e4:	2c 98       	cbi	0x05, 4	; 5
			PORTB&=~(1<<PORTB5);//STOP
  e6:	2d 98       	cbi	0x05, 5	; 5
  e8:	ce cf       	rjmp	.-100    	; 0x86 <main+0x6>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
