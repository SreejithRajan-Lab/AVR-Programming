
Delay_Modular_Timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076d  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a6  00000000  00000000  00000941  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f3  00000000  00000000  00000fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000012dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000028  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer0_init>:
#include "delay.h"
#include<stdint.h>

void timer0_init(void)
{
		TCCR0A|=(1<<WGM01); //CTC MODE
  80:	84 b5       	in	r24, 0x24	; 36
  82:	82 60       	ori	r24, 0x02	; 2
  84:	84 bd       	out	0x24, r24	; 36
		OCR0A=249; // SETPOINT EQUAL TO 250
  86:	89 ef       	ldi	r24, 0xF9	; 249
  88:	87 bd       	out	0x27, r24	; 39
		TCNT0=0; // INITIAL VALUE OF TIMER IS 0
  8a:	16 bc       	out	0x26, r1	; 38
		TCCR0B|=(1<<CS00);
  8c:	85 b5       	in	r24, 0x25	; 37
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	85 bd       	out	0x25, r24	; 37
		TCCR0B|=(1<<CS01); // prescalar of 64
  92:	85 b5       	in	r24, 0x25	; 37
  94:	82 60       	ori	r24, 0x02	; 2
  96:	85 bd       	out	0x25, r24	; 37
		TIFR0 |=(1<<OCF0A); // Writing 1 to OCF0A bit of TIFR0 REGISTER TO RESET IT (BECAUSE AVR PEOPLE ARE MAD)
  98:	a9 9a       	sbi	0x15, 1	; 21
  9a:	08 95       	ret

0000009c <delay_ms>:
		
}
void delay_ms(uint16_t ms)
{

	while(ms--)
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <delay_ms+0x8>
	{
			TIFR0 |=(1<<OCF0A);
  9e:	a9 9a       	sbi	0x15, 1	; 21
		while(!(TIFR0&(1<<OCF0A)))
  a0:	a9 9b       	sbis	0x15, 1	; 21
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <delay_ms+0x4>
		
}
void delay_ms(uint16_t ms)
{

	while(ms--)
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	d8 f7       	brcc	.-10     	; 0x9e <delay_ms+0x2>
			//exact 1ms delay
		}
		
	}
	
  a8:	08 95       	ret

000000aa <main>:
#include <avr/io.h>
#include "delay.h"

int main(void) 
{
    DDRB|=(1<<DDB5);
  aa:	25 9a       	sbi	0x04, 5	; 4
	timer0_init();
  ac:	0e 94 40 00 	call	0x80	; 0x80 <timer0_init>
    while (1) 
    {
		PORTB ^=(1<<PORTB5);
  b0:	c0 e2       	ldi	r28, 0x20	; 32
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	8c 27       	eor	r24, r28
  b6:	85 b9       	out	0x05, r24	; 5
		delay_ms(5000);
  b8:	88 e8       	ldi	r24, 0x88	; 136
  ba:	93 e1       	ldi	r25, 0x13	; 19
  bc:	0e 94 4e 00 	call	0x9c	; 0x9c <delay_ms>
  c0:	f8 cf       	rjmp	.-16     	; 0xb2 <main+0x8>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
